# - *- coding: utf- 8 - *-
import asyncio
from contextlib import suppress

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import MessageCantBeDeleted

from tgbot.data.config import BOT_DESCRIPTION, WHY_WE, ABOUT_FIRMS
from tgbot.data.loader import dp
from tgbot.keyboards.inline_main import profile_open_inl
from tgbot.keyboards.inline_page import *
from tgbot.keyboards.inline_user import user_support_finl, products_open_finl, products_confirm_finl
from tgbot.keyboards.reply_main import menu_frep
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import get_date, split_messages, get_unix, ded
from tgbot.utils.misc_functions import open_profile_user, upload_text, get_faq


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üí≥ –ö–∞—Ä—Ç—ã", state="*")
async def user_shop(message: Message, state: FSMContext):
    await state.finish()

    get_categories = get_all_categoriesx()

    if len(get_categories) >= 1:
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –±–∞–Ω–∫:</b>",
            reply_markup=products_item_category_swipe_fp(0),
        )
    else:
        await message.answer("<b>üõí –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def user_profile(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(
        open_profile_user(message.from_user.id),
        reply_markup=profile_open_inl,
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
@dp.message_handler(text="üßÆ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", state="*")
async def user_available(message: Message, state: FSMContext):
    await state.finish()

    get_categories = get_all_categoriesx()
    save_items = []

    for category in get_categories:
        get_positions = get_positionsx(category_id=category['category_id'])
        this_items = []

        if len(get_positions) >= 1:
            this_items = [f"<b>‚ûñ‚ûñ‚ûñ {category['category_name']} ‚ûñ‚ûñ‚ûñ</b>"]

            for position in get_positions:
                get_items = get_itemsx(position_id=position['position_id'])

                if len(get_items) >= 1:
                    this_items.append(
                        f"{position['position_name']} | {position['position_price']}‚ÇΩ | –í –Ω–∞–ª–∏—á–∏–∏ {len(get_items)} —à—Ç",
                    )

        if len(this_items) >= 2:
            save_items.append(this_items)

    if len(save_items) >= 1:
        send_items = ":^^^^^:".join(["\n".join(item) for item in save_items])

        if len(send_items) > 3500:
            split_items = split_messages(send_items.split("\n"), 40)

            for item in split_items:
                await message.answer("\n".join(item).replace(":^^^^^:", "\n\n"))
        else:
            await message.answer("\n\n".join(["\n".join(item) for item in save_items]))
    else:
        await message.answer("<b>üõí –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")


@dp.message_handler(text=["‚Ñπ –û –Ω–∞—Å", "/faq"], state="*")
async def user_faq(message: Message, state: FSMContext):
    # await state.finish()
    #
    # send_message = get_settingsx()['misc_faq']
    # if send_message == "None":
    #     send_message = ded(f"""
    #     {ABOOUT_US}
    # """)
    await message.answer(
        ded(f"""
                {WHY_WE}
            """),
        disable_web_page_preview=True,
    )

    # await message.answer(get_faq(message.from_user.id, send_message), disable_web_page_preview=True)


# –Æ—Ä–∏–¥–∏–Ω—á—Å–∫–∏–µ —Ñ–∏—Ä–º—ã
@dp.message_handler(text=["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ñ–∏—Ä–º—ã", "/firms"], state="*")
async def user_faq(message: Message):
    get_settings = get_settingsx()
    get_user = get_userx(user_id=get_settings['misc_support'])
    await message.answer(
        ded(f"""
                    {ABOUT_FIRMS}
                """),
        disable_web_page_preview=True,
        reply_markup=user_support_finl(get_user['user_login'])
    )


@dp.message_handler(text=["üìÆ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "/support"], state="*")
async def user_support(message: Message, state: FSMContext):
    await state.finish()

    get_settings = get_settingsx()

    if str(get_settings['misc_support']).isdigit():
        get_user = get_userx(user_id=get_settings['misc_support'])

        if len(get_user['user_login']) >= 1:
            return await message.answer(
                "<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
                reply_markup=user_support_finl(get_user['user_login']),
            )
        else:
            update_settingsx(misc_support="None")


################################################################################################
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="user_history", state="*")
async def user_history(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id, 5)

    if len(last_purchases) >= 1:
        await call.answer("üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        for purchases in last_purchases:
            link_items = await upload_text(call, purchases['purchase_item'])

            await call.message.answer(
                ded(f"""
                    <b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>
                    üõí –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>
                    üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>
                    üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
                """)
            )

        await call.message.answer(open_profile_user(call.from_user.id), reply_markup=profile_open_inl)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@dp.callback_query_handler(text="user_profile", state="*")
async def user_profile_return(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        open_profile_user(call.from_user.id),
        reply_markup=profile_open_inl,
    )


################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(
        "<b>üõí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
        reply_markup=products_item_category_swipe_fp(remover),
    )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_open:", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = get_categoryx(category_id=category_id)
    get_positions = get_positionsx(category_id=category_id)

    if len(get_positions) >= 1:
        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        await call.message.answer(
            f"<b>üõí –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
            reply_markup=products_item_position_swipe_fp(remover, category_id),
        )
    else:
        if remover == "0":
            await call.message.edit_text("<b>üõí –£–≤—ã, —Ç–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
            await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        else:
            await call.answer(
                f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                True,
                cache_time=5,
            )


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_open:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    category_id = call.data.split(":")[2]
    remover = int(call.data.split(":")[3])

    get_position = get_positionx(position_id=position_id)
    get_category = get_categoryx(category_id=category_id)
    get_items = get_itemsx(position_id=position_id)

    if get_position['position_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n{get_position['position_description']}"

    send_msg = ded(f"""
        <b>üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>
        üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>
        üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>
        üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>
        {text_description}
    """)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()

    if len(get_position['position_photo']) >= 5:
        await call.message.answer_photo(
            get_position['position_photo'],
            send_msg,
            reply_markup=products_open_finl(position_id, category_id, remover),
        )
    else:
        await call.message.answer(
            send_msg,
            reply_markup=products_open_finl(position_id, category_id, remover),
        )


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_swipe:", state="*")
async def user_purchase_position_next_page(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_category = get_categoryx(category_id=category_id)

    with suppress(MessageCantBeDeleted):
        await call.message.delete()
    await call.message.answer(
        f"<b>üõí –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
        reply_markup=products_item_position_swipe_fp(remover, category_id),
    )


########################################### –ü–û–ö–£–ü–ö–ê ##########################################
# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_item_open:", state="*")
async def user_purchase_select(call: CallbackQuery, state: FSMContext):
    position_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)
    #
    if get_position['position_price'] != 0:
        get_count = len(get_items)


    if get_count == 1:
        await state.update_data(here_cache_position_id=position_id)
        await state.update_data(cache_get_count=get_count)
        await state.finish()

        with suppress(MessageCantBeDeleted):
            await call.message.delete()
        await call.answer('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
        await state.set_state("here_address")



    elif get_count >= 1:
        await state.update_data(here_cache_position_id=position_id)
        await state.update_data(cache_get_count=get_count)

        await state.set_state("here_item_count")

        with suppress(MessageCantBeDeleted):
            await call.message.delete()

        await call.message.answer(
            ded(f"""
                    <b>üõí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>
                    ‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>
                    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    üõí –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>
                    
                """)
        )

    else:
        await call.answer("üõí –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(state="here_item_count")
async def user_purchase_select_count(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']

    get_position = get_positionx(position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)
    get_items = get_itemsx(position_id=position_id)

    if get_position['position_price'] != 0:
        get_count = int(get_user['user_balance'] / get_position['position_price'])

        if get_count > len(get_items):
            get_count = len(get_items)
    else:
        get_count = len(get_items)

    send_message = ded(f"""
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        üõí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        ‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{len(get_items)}</code>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        üõí –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>
        
    """)

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = round(get_position['position_price'] * get_count, 2)

        if len(get_items) >= 1:
            if 1 <= get_count <= len(get_items):
                await state.finish()

                await message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
                await state.update_data(here_cache_position_id=position_id)
                await state.update_data(cache_get_count=get_count)
                await state.update_data(cache_amount_pay=amount_pay)
                await state.set_state("here_address")





            else:
                await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n" + send_message)
        else:
            await state.finish()
            await message.answer("<b>üõí –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>")
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n" + send_message)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="buy_item_confirm:", state="*")
async def user_purchase_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    get_count = int(call.data.split(":")[3])
    get_address = (await state.get_data())['address_cache']



    if get_action == "yes":

        await call.message.edit_text("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>")





        get_position = get_positionx(position_id=position_id)
        print('–ü–æ–∑–∏—Ü–∏—è')
        print(get_position)
        get_items = get_itemsx(position_id=position_id)
        get_user = get_userx(user_id=call.from_user.id)

        amount_pay = round(get_position['position_price'] * get_count, 2)
        receipt, buy_time = get_unix(), get_date()

        if 1 <= int(get_count) <= len(get_items):

            save_items, save_count, save_len = buy_itemx(get_items, get_count)

            if get_count != save_count:
                amount_pay = round(get_position['position_price'] * save_count, 2)
                get_count = save_count



            update_userx(get_user['user_id'], user_balance=round(get_user['user_balance'] - amount_pay, 2))
            add_purchasex(
                get_user['user_id'], get_user['user_login'],  get_user['user_name'], get_address, receipt, get_count,
                amount_pay, get_position['position_price'], get_position['position_id'],
                get_position['position_name'], "\n".join(save_items), buy_time, receipt,
                get_user['user_balance'], round(get_user['user_balance'] - amount_pay, 2),
            )

            with suppress(MessageCantBeDeleted):
                await call.message.delete()

            get_settings = get_settingsx()
            get_user_admin = get_userx(user_id=get_settings['misc_support'])
            get_props = get_storage_props()[0]
            await call.message.answer(
                ded(f"""
                        <b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏  –∑–∞—è–≤–∫—É. \n\n –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n –ø–ª–∞—Ç–µ–∂–∞ –≤  —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ \n –∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞\n\n–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n\n{get_props['name']}</b>
                        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                        ‚òëÔ∏è –ß–µ–∫: <code>#{receipt}</code>
                        üõí –¢–æ–≤–∞—Ä: <code>{get_position['position_name']} | {get_count}—à—Ç | {amount_pay}‚ÇΩ</code>
                        üì• –ê–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{get_address}</code>
                        ‚åõÔ∏è –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>
                    """),
                reply_markup=user_support_finl(get_user_admin['user_login']),
            )
            await state.finish()

        else:
            await call.message.answer(
                "<b>üõí –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                reply_markup=menu_frep(call.from_user.id),
            )
    else:
        get_categories = get_all_categoriesx()

        if len(get_categories) >= 1:
            await call.message.edit_text(
                "<b>üõí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                reply_markup=products_item_category_swipe_fp(0),
            )
        else:
            await call.message.edit_text("<b>‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>")



# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞
@dp.message_handler(state="here_address")
async def user_send_address(message: Message, state: FSMContext ):
    position_id = (await state.get_data())['here_cache_position_id']

    get_position = get_positionx(position_id=position_id)

    get_count =(await state.get_data())['cache_get_count']
    amount_pay =(await state.get_data())['cache_amount_pay']
    address = message.text


    if not message.text.isnumeric():
        await message.answer(f"–í–∞—à –∞–¥—Ä–µ—Å—Å\n\n{message.text}")
        await state.update_data(address_cache=message.text)
        get_props = get_storage_props()[0]

        await message.answer(
            ded(f"""
                                    <b>üõí –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>
                                    \n\n
                                    –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n\n{get_props['name']}
                                    
                                    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                                    üõí –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>
                                    üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>
                                    üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>
                                    üì• –ê–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{address}</code>
                                """),
            reply_markup=products_confirm_finl(position_id, get_count),
        )





    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞")

#await state.update_data(get_count_cache=get_count),
                #await state.set_state("here_item_count")

